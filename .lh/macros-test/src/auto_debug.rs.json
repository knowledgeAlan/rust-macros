{
    "sourceFile": "macros-test/src/auto_debug.rs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 37,
            "patches": [
                {
                    "date": 1720602591392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1720602650932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,4 @@\n use darling::{ast::Data,FromDeriveInput,FromField};\n+use proc_macro2::TokenStream;\n+use quote::quote;\n+use syn::DeriveInput;\n"
                },
                {
                    "date": 1720602733269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,13 @@\n use darling::{ast::Data,FromDeriveInput,FromField};\n use proc_macro2::TokenStream;\n use quote::quote;\n use syn::DeriveInput;\n+\n+\n+#[derive(Debug,FromDeriveInput)]\n+\n+struct AutoDebugInfo {\n+    ident: syn::Ident,\n+    generics: syn::Generics,\n+    data:Data<(),AutoDebugInfo>,\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720602762148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,5 +9,9 @@\n struct AutoDebugInfo {\n     ident: syn::Ident,\n     generics: syn::Generics,\n     data:Data<(),AutoDebugInfo>,\n-}\n\\ No newline at end of file\n+}\n+\n+\n+#[derive(Debug,FromField)];\n+\n"
                },
                {
                    "date": 1720602831221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,6 +12,11 @@\n     data:Data<(),AutoDebugInfo>,\n }\n \n \n-#[derive(Debug,FromField)];\n+#[derive(Debug,FromField)]\n+#[darling(attributes(debug))]\n \n+struct AutoDebugFieldsInfo {\n+    ident: Option<syn::Ident>,\n+    \n+}\n"
                },
                {
                    "date": 1720602883106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,6 +17,9 @@\n #[darling(attributes(debug))]\n \n struct AutoDebugFieldsInfo {\n     ident: Option<syn::Ident>,\n-    \n+    #[darling(default)]\n+    skip: bool,\n }\n+\n+\n"
                },
                {
                    "date": 1720603129052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n use darling::{ast::Data,FromDeriveInput,FromField};\n use proc_macro2::TokenStream;\n use quote::quote;\n-use syn::DeriveInput;\n+use syn::{Data, DeriveInput};\n \n \n #[derive(Debug,FromDeriveInput)]\n \n@@ -22,4 +22,15 @@\n     skip: bool,\n }\n \n \n+pub (crate) fn process_auto_debug(input: DeriveInput) -> TokenStream{\n+\n+    let AutoDebugFieldsInfo {\n+        ident,\n+        generics,\n+        data:Data::Struct(fields),\n+    } = AutoDebugInfo::from_derive_input(&input).unwrap()\n+    else{\n+        panic!(\"AutoDebug only works on structs\");\n+    }\n+}\n"
                },
                {
                    "date": 1720603235671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,5 +32,11 @@\n     } = AutoDebugInfo::from_derive_input(&input).unwrap()\n     else{\n         panic!(\"AutoDebug only works on structs\");\n     }\n+\n+\n+    let fields = fields.iter().map(|field|{\n+\n+        let ident: &syn::Ident =  field.ident.as_ref().unwrap();\n+    });\n }\n"
                },
                {
                    "date": 1720603253368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,10 @@\n         panic!(\"AutoDebug only works on structs\");\n     }\n \n \n-    let fields = fields.iter().map(|field|{\n+    let fields = fields.iter().map(|field: &AutoDebugFieldsInfo|{\n \n         let ident: &syn::Ident =  field.ident.as_ref().unwrap();\n+\n     });\n }\n"
                },
                {
                    "date": 1720603571883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,7 +37,27 @@\n \n     let fields = fields.iter().map(|field: &AutoDebugFieldsInfo|{\n \n         let ident: &syn::Ident =  field.ident.as_ref().unwrap();\n+        let skip:bool = field.skip;\n+        \n+        if skip {\n+            quote!{};\n+        }else{\n \n+            quote! {\n+                .field(stringify!(#ident),&self.#ident)\n+            }\n+        }\n     });\n+\n+\n+    quote !{\n+        impl ::core::fmt:debug for #ident #generics {\n+            #[inline]\n+            fn fmt(&self,f:&mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n+                \n+            }\n+        }\n+    }\n+\n }\n"
                },
                {
                    "date": 1720603612870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,11 @@\n     quote !{\n         impl ::core::fmt:debug for #ident #generics {\n             #[inline]\n             fn fmt(&self,f:&mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n-                \n+                f.debug_struct(stringify($ident))\n+                #(#fields)*\n+                .finish()\n             }\n         }\n     }\n \n"
                },
                {
                    "date": 1720603653873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n use darling::{ast::Data,FromDeriveInput,FromField};\n use proc_macro2::TokenStream;\n use quote::quote;\n-use syn::{Data, DeriveInput};\n+use syn::{DeriveInput};\n \n \n #[derive(Debug,FromDeriveInput)]\n \n"
                },
                {
                    "date": 1720603662190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n use darling::{ast::Data,FromDeriveInput,FromField};\n use proc_macro2::TokenStream;\n use quote::quote;\n-use syn::{DeriveInput};\n+use syn::DeriveInput;\n \n \n #[derive(Debug,FromDeriveInput)]\n \n"
                },
                {
                    "date": 1720603783287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n struct AutoDebugInfo {\n     ident: syn::Ident,\n     generics: syn::Generics,\n-    data:Data<(),AutoDebugInfo>,\n+    data:Data<(),AutoDebugFieldsInfo>,\n }\n \n \n #[derive(Debug,FromField)]\n"
                },
                {
                    "date": 1720603792073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n \n \n pub (crate) fn process_auto_debug(input: DeriveInput) -> TokenStream{\n \n-    let AutoDebugFieldsInfo {\n+    let AutoDebugInfo {\n         ident,\n         generics,\n         data:Data::Struct(fields),\n     } = AutoDebugInfo::from_derive_input(&input).unwrap()\n"
                },
                {
                    "date": 1720603847306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         data:Data::Struct(fields),\n     } = AutoDebugInfo::from_derive_input(&input).unwrap()\n     else{\n         panic!(\"AutoDebug only works on structs\");\n-    }\n+    };\n \n \n     let fields = fields.iter().map(|field: &AutoDebugFieldsInfo|{\n \n"
                },
                {
                    "date": 1720604105765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+use darling::{ast::Data,FromDeriveInput,FromField};\n+use proc_macro2::TokenStream;\n+use quote::quote;\n+use syn::DeriveInput;\n+\n+\n+#[derive(Debug,FromDeriveInput)]\n+\n+struct AutoDebugInfo {\n+    ident: syn::Ident,\n+    generics: syn::Generics,\n+    data:Data<(),AutoDebugFieldsInfo>,\n+}\n+\n+\n+#[derive(Debug,FromField)]\n+#[darling(attributes(debug))]\n+\n+struct AutoDebugFieldsInfo {\n+    ident: Option<syn::Ident>,\n+    #[darling(default)]\n+    skip: bool,\n+}\n+\n+\n+pub (crate) fn process_auto_debug(input: DeriveInput) -> TokenStream{\n+\n+    let AutoDebugInfo {\n+        ident,\n+        generics,\n+        data:Data::Struct(fields),\n+    } = AutoDebugInfo::from_derive_input(&input).unwrap()\n+    else{\n+        panic!(\"AutoDebug only works on structs\");\n+    };\n+\n+\n+    let fields = fields.iter().map(|field: &AutoDebugFieldsInfo|{\n+\n+        let ident: &syn::Ident =  field.ident.as_ref().unwrap();\n+        let skip:bool = field.skip;\n+        \n+        if skip {\n+            quote!{};\n+        }else{\n+            quote!{\n+                .field(stringify!(#ident),&self.#ident)\n+            }\n+        }\n+    });\n+\n+\n+    quote !{\n+        impl ::core::fmt:debug for #ident #generics {\n+            #[inline]\n+            fn fmt(&self,f:&mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n+                f.debug_struct(stringify($ident))\n+                #(#fields)*\n+                .finish()\n+            }\n+        }\n+    }\n+\n+}\n"
                },
                {
                    "date": 1720604117830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,75 +42,10 @@\n         \n         if skip {\n             quote!{};\n         }else{\n-            quote!{\n-                .field(stringify!(#ident),&self.#ident)\n-            }\n-        }\n-    });\n-\n-\n-    quote !{\n-        impl ::core::fmt:debug for #ident #generics {\n-            #[inline]\n-            fn fmt(&self,f:&mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n-                f.debug_struct(stringify($ident))\n-                #(#fields)*\n-                .finish()\n-            }\n-        }\n-    }\n-\n-}\n-use darling::{ast::Data,FromDeriveInput,FromField};\n-use proc_macro2::TokenStream;\n-use quote::quote;\n-use syn::DeriveInput;\n-\n-\n-#[derive(Debug,FromDeriveInput)]\n-\n-struct AutoDebugInfo {\n-    ident: syn::Ident,\n-    generics: syn::Generics,\n-    data:Data<(),AutoDebugFieldsInfo>,\n-}\n-\n-\n-#[derive(Debug,FromField)]\n-#[darling(attributes(debug))]\n-\n-struct AutoDebugFieldsInfo {\n-    ident: Option<syn::Ident>,\n-    #[darling(default)]\n-    skip: bool,\n-}\n-\n-\n-pub (crate) fn process_auto_debug(input: DeriveInput) -> TokenStream{\n-\n-    let AutoDebugInfo {\n-        ident,\n-        generics,\n-        data:Data::Struct(fields),\n-    } = AutoDebugInfo::from_derive_input(&input).unwrap()\n-    else{\n-        panic!(\"AutoDebug only works on structs\");\n-    };\n-\n-\n-    let fields = fields.iter().map(|field: &AutoDebugFieldsInfo|{\n-\n-        let ident: &syn::Ident =  field.ident.as_ref().unwrap();\n-        let skip:bool = field.skip;\n-        \n-        if skip {\n-            quote!{};\n-        }else{\n-\n             quote! {\n-                .field(stringify!(#ident),&self.#ident)\n+                .field(stringify!(#ident), &self.#ident)\n             }\n         }\n     });\n \n"
                },
                {
                    "date": 1720604128792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,15 +35,13 @@\n     };\n \n \n     let fields = fields.iter().map(|field: &AutoDebugFieldsInfo|{\n-\n-        let ident: &syn::Ident =  field.ident.as_ref().unwrap();\n-        let skip:bool = field.skip;\n-        \n+        let ident: &syn::Ident = field.ident.as_ref().unwrap();\n+        let skip = field.skip;\n         if skip {\n-            quote!{};\n-        }else{\n+            quote! {}\n+        } else {\n             quote! {\n                 .field(stringify!(#ident), &self.#ident)\n             }\n         }\n"
                },
                {
                    "date": 1720604158603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n         panic!(\"AutoDebug only works on structs\");\n     };\n \n \n-    let fields = fields.iter().map(|field: &AutoDebugFieldsInfo|{\n+    let fields = fields.iter().map(|field: &AutoDebugFieldsInfo| {\n         let ident: &syn::Ident = field.ident.as_ref().unwrap();\n         let skip = field.skip;\n         if skip {\n             quote! {}\n@@ -46,16 +46,15 @@\n             }\n         }\n     });\n \n-\n-    quote !{\n-        impl ::core::fmt:debug for #ident #generics {\n+    quote! {\n+        impl ::core::fmt::Debug for #ident #generics {\n             #[inline]\n-            fn fmt(&self,f:&mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n-                f.debug_struct(stringify($ident))\n-                #(#fields)*\n-                .finish()\n+            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n+                f.debug_struct(stringify!(#ident))\n+                    #(#fields)*\n+                    .finish()\n             }\n         }\n     }\n \n"
                },
                {
                    "date": 1720604196180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,27 +34,30 @@\n         panic!(\"AutoDebug only works on structs\");\n     };\n \n \n-    let fields = fields.iter().map(|field: &AutoDebugFieldsInfo| {\n-        let ident: &syn::Ident = field.ident.as_ref().unwrap();\n-        let skip = field.skip;\n+    let fields = fields.iter().map(|field: &AutoDebugFieldsInfo|{\n+\n+        let ident: &syn::Ident =  field.ident.as_ref().unwrap();\n+        let skip:bool = field.skip;\n+        \n         if skip {\n-            quote! {}\n-        } else {\n+            quote!{};\n+        }else{\n             quote! {\n                 .field(stringify!(#ident), &self.#ident)\n             }\n         }\n     });\n \n-    quote! {\n-        impl ::core::fmt::Debug for #ident #generics {\n+\n+    quote !{\n+        impl ::core::fmt:debug for #ident #generics {\n             #[inline]\n-            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n-                f.debug_struct(stringify!(#ident))\n-                    #(#fields)*\n-                    .finish()\n+            fn fmt(&self,f:&mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n+                f.debug_struct(stringify!($ident))\n+                #(#fields)*\n+                .finish()\n             }\n         }\n     }\n \n"
                },
                {
                    "date": 1720604285160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n         panic!(\"AutoDebug only works on structs\");\n     };\n \n \n-    let fields = fields.iter().map(|field: &AutoDebugFieldsInfo|{\n+    let fields = fields.iter().map(|field: &AutoDebugFieldsInfo| {\n \n         let ident: &syn::Ident =  field.ident.as_ref().unwrap();\n         let skip:bool = field.skip;\n         \n"
                },
                {
                    "date": 1720604290422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n         panic!(\"AutoDebug only works on structs\");\n     };\n \n \n-    let fields = fields.iter().map(|field: &AutoDebugFieldsInfo| {\n+    let fields = fields.iter().map(|field: &AutoDebugFieldsInfo|{\n \n         let ident: &syn::Ident =  field.ident.as_ref().unwrap();\n         let skip:bool = field.skip;\n         \n"
                },
                {
                    "date": 1720604296600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,15 +49,15 @@\n         }\n     });\n \n \n-    quote !{\n-        impl ::core::fmt:debug for #ident #generics {\n+    quote! {\n+        impl ::core::fmt::Debug for #ident #generics {\n             #[inline]\n-            fn fmt(&self,f:&mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n-                f.debug_struct(stringify!($ident))\n-                #(#fields)*\n-                .finish()\n+            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n+                f.debug_struct(stringify!(#ident))\n+                    #(#fields)*\n+                    .finish()\n             }\n         }\n     }\n \n"
                },
                {
                    "date": 1720604325201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,10 +40,10 @@\n         let ident: &syn::Ident =  field.ident.as_ref().unwrap();\n         let skip:bool = field.skip;\n         \n         if skip {\n-            quote!{};\n-        }else{\n+            quote! {}\n+        } else {\n             quote! {\n                 .field(stringify!(#ident), &self.#ident)\n             }\n         }\n"
                },
                {
                    "date": 1720604333556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+use darling::{ast::Data,FromDeriveInput,FromField};\n+use proc_macro2::TokenStream;\n+use quote::quote;\n+use syn::DeriveInput;\n+\n+\n+#[derive(Debug,FromDeriveInput)]\n+\n+struct AutoDebugInfo {\n+    ident: syn::Ident,\n+    generics: syn::Generics,\n+    data:Data<(),AutoDebugFieldsInfo>,\n+}\n+\n+\n+#[derive(Debug,FromField)]\n+#[darling(attributes(debug))]\n+\n+struct AutoDebugFieldsInfo {\n+    ident: Option<syn::Ident>,\n+    #[darling(default)]\n+    skip: bool,\n+}\n+\n+\n+pub (crate) fn process_auto_debug(input: DeriveInput) -> TokenStream{\n+\n+    let AutoDebugInfo {\n+        ident,\n+        generics,\n+        data:Data::Struct(fields),\n+    } = AutoDebugInfo::from_derive_input(&input).unwrap()\n+    else{\n+        panic!(\"AutoDebug only works on structs\");\n+    };\n+\n+\n+    let fields = fields.iter().map(|field: &AutoDebugFieldsInfo|{\n+\n+        let ident: &syn::Ident =  field.ident.as_ref().unwrap();\n+        let skip:bool = field.skip;\n+        \n+        if skip {\n+            quote!{};\n+        }else{\n+            quote! {\n+                .field(stringify!(#ident), &self.#ident)\n+            }\n+        }\n+    });\n+\n+\n+    quote! {\n+        impl ::core::fmt::Debug for #ident #generics {\n+            #[inline]\n+            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n+                f.debug_struct(stringify!(#ident))\n+                    #(#fields)*\n+                    .finish()\n+            }\n+        }\n+    }\n+\n+}\n"
                },
                {
                    "date": 1720604338583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n         let ident: &syn::Ident =  field.ident.as_ref().unwrap();\n         let skip:bool = field.skip;\n         \n         if skip {\n-            quote!{};\n+            quote! {};\n         }else{\n             quote! {\n                 .field(stringify!(#ident), &self.#ident)\n             }\n@@ -61,68 +61,4 @@\n         }\n     }\n \n }\n-use darling::{ast::Data,FromDeriveInput,FromField};\n-use proc_macro2::TokenStream;\n-use quote::quote;\n-use syn::DeriveInput;\n-\n-\n-#[derive(Debug,FromDeriveInput)]\n-\n-struct AutoDebugInfo {\n-    ident: syn::Ident,\n-    generics: syn::Generics,\n-    data:Data<(),AutoDebugFieldsInfo>,\n-}\n-\n-\n-#[derive(Debug,FromField)]\n-#[darling(attributes(debug))]\n-\n-struct AutoDebugFieldsInfo {\n-    ident: Option<syn::Ident>,\n-    #[darling(default)]\n-    skip: bool,\n-}\n-\n-\n-pub (crate) fn process_auto_debug(input: DeriveInput) -> TokenStream{\n-\n-    let AutoDebugInfo {\n-        ident,\n-        generics,\n-        data:Data::Struct(fields),\n-    } = AutoDebugInfo::from_derive_input(&input).unwrap()\n-    else{\n-        panic!(\"AutoDebug only works on structs\");\n-    };\n-\n-\n-    let fields = fields.iter().map(|field: &AutoDebugFieldsInfo|{\n-\n-        let ident: &syn::Ident =  field.ident.as_ref().unwrap();\n-        let skip:bool = field.skip;\n-        \n-        if skip {\n-            quote! {}\n-        } else {\n-            quote! {\n-                .field(stringify!(#ident), &self.#ident)\n-            }\n-        }\n-    });\n-\n-\n-    quote! {\n-        impl ::core::fmt::Debug for #ident #generics {\n-            #[inline]\n-            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n-                f.debug_struct(stringify!(#ident))\n-                    #(#fields)*\n-                    .finish()\n-            }\n-        }\n-    }\n-\n-}\n"
                },
                {
                    "date": 1720604344437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n         let skip:bool = field.skip;\n         \n         if skip {\n             quote! {};\n-        }else{\n+        } else {\n             quote! {\n                 .field(stringify!(#ident), &self.#ident)\n             }\n         }\n"
                },
                {
                    "date": 1720604410806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n         let ident: &syn::Ident =  field.ident.as_ref().unwrap();\n         let skip:bool = field.skip;\n         \n         if skip {\n-            quote! {};\n+            quote! {}\n         } else {\n             quote! {\n                 .field(stringify!(#ident), &self.#ident)\n             }\n"
                },
                {
                    "date": 1720604416988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n         let ident: &syn::Ident =  field.ident.as_ref().unwrap();\n         let skip:bool = field.skip;\n         \n         if skip {\n-            quote! {}\n+            quote! {};\n         } else {\n             quote! {\n                 .field(stringify!(#ident), &self.#ident)\n             }\n"
                },
                {
                    "date": 1720604423379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,63 @@\n+use darling::{ast::Data,FromDeriveInput,FromField};\n+use proc_macro2::TokenStream;\n+use quote::quote;\n+use syn::DeriveInput;\n+\n+\n+#[derive(Debug,FromDeriveInput)]\n+\n+struct AutoDebugInfo {\n+    ident: syn::Ident,\n+    generics: syn::Generics,\n+    data:Data<(),AutoDebugFieldsInfo>,\n+}\n+\n+\n+#[derive(Debug,FromField)]\n+#[darling(attributes(debug))]\n+\n+struct AutoDebugFieldsInfo {\n+    ident: Option<syn::Ident>,\n+    #[darling(default)]\n+    skip: bool,\n+}\n+\n+\n+pub (crate) fn process_auto_debug(input: DeriveInput) -> TokenStream{\n+\n+    let AutoDebugInfo {\n+        ident,\n+        generics,\n+        data:Data::Struct(fields),\n+    } = AutoDebugInfo::from_derive_input(&input).unwrap()\n+    else{\n+        panic!(\"AutoDebug only works on structs\");\n+    };\n+\n+\n+    let fields = fields.iter().map(|field: &AutoDebugFieldsInfo|{\n+\n+        let ident: &syn::Ident =  field.ident.as_ref().unwrap();\n+        let skip:bool = field.skip;\n+        \n+        if skip {\n+            quote! {};\n+        } else {\n+            quote! {.field(stringify!(#ident), &self.#ident)\n+            }\n+        }\n+    });\n+\n+\n+    quote! {\n+        impl ::core::fmt::Debug for #ident #generics {\n+            #[inline]\n+            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n+                f.debug_struct(stringify!(#ident))\n+                    #(#fields)*\n+                    .finish()\n+            }\n+        }\n+    }\n+\n+}\n"
                },
                {
                    "date": 1720604452322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,71 +42,8 @@\n         \n         if skip {\n             quote! {};\n         } else {\n-            quote! {.field(stringify!(#ident), &self.#ident)\n-            }\n-        }\n-    });\n-\n-\n-    quote! {\n-        impl ::core::fmt::Debug for #ident #generics {\n-            #[inline]\n-            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n-                f.debug_struct(stringify!(#ident))\n-                    #(#fields)*\n-                    .finish()\n-            }\n-        }\n-    }\n-\n-}\n-use darling::{ast::Data,FromDeriveInput,FromField};\n-use proc_macro2::TokenStream;\n-use quote::quote;\n-use syn::DeriveInput;\n-\n-\n-#[derive(Debug,FromDeriveInput)]\n-\n-struct AutoDebugInfo {\n-    ident: syn::Ident,\n-    generics: syn::Generics,\n-    data:Data<(),AutoDebugFieldsInfo>,\n-}\n-\n-\n-#[derive(Debug,FromField)]\n-#[darling(attributes(debug))]\n-\n-struct AutoDebugFieldsInfo {\n-    ident: Option<syn::Ident>,\n-    #[darling(default)]\n-    skip: bool,\n-}\n-\n-\n-pub (crate) fn process_auto_debug(input: DeriveInput) -> TokenStream{\n-\n-    let AutoDebugInfo {\n-        ident,\n-        generics,\n-        data:Data::Struct(fields),\n-    } = AutoDebugInfo::from_derive_input(&input).unwrap()\n-    else{\n-        panic!(\"AutoDebug only works on structs\");\n-    };\n-\n-\n-    let fields = fields.iter().map(|field: &AutoDebugFieldsInfo|{\n-\n-        let ident: &syn::Ident =  field.ident.as_ref().unwrap();\n-        let skip:bool = field.skip;\n-        \n-        if skip {\n-            quote! {};\n-        } else {\n             quote! {\n                 .field(stringify!(#ident), &self.#ident)\n             }\n         }\n"
                },
                {
                    "date": 1720604654196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n         if skip {\n             quote! {};\n         } else {\n             quote! {\n-                .field(stringify!(#ident), &self.#ident)\n+                .field(stringify!(#ident),&self.#ident)\n             }\n         }\n     });\n \n"
                },
                {
                    "date": 1720604659598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n         if skip {\n             quote! {};\n         } else {\n             quote! {\n-                .field(stringify!(#ident),&self.#ident)\n+                .field(stringify!(#ident), &self.#ident)\n             }\n         }\n     });\n \n"
                },
                {
                    "date": 1720604672893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+use darling::{ast::Data,FromDeriveInput,FromField};\n+use proc_macro2::TokenStream;\n+use quote::quote;\n+use syn::DeriveInput;\n+\n+\n+#[derive(Debug,FromDeriveInput)]\n+\n+struct AutoDebugInfo {\n+    ident: syn::Ident,\n+    generics: syn::Generics,\n+    data:Data<(),AutoDebugFieldsInfo>,\n+}\n+\n+\n+#[derive(Debug,FromField)]\n+#[darling(attributes(debug))]\n+\n+struct AutoDebugFieldsInfo {\n+    ident: Option<syn::Ident>,\n+    #[darling(default)]\n+    skip: bool,\n+}\n+\n+\n+pub (crate) fn process_auto_debug(input: DeriveInput) -> TokenStream{\n+\n+    let AutoDebugInfo {\n+        ident,\n+        generics,\n+        data:Data::Struct(fields),\n+    } = AutoDebugInfo::from_derive_input(&input).unwrap()\n+    else{\n+        panic!(\"AutoDebug only works on structs\");\n+    };\n+\n+\n+    let fields = fields.iter().map(|field: &AutoDebugFieldsInfo|{\n+\n+        let ident: &syn::Ident =  field.ident.as_ref().unwrap();\n+        let skip:bool = field.skip;\n+        \n+        if skip {\n+            quote! {};\n+        } else {\n+            quote! {\n+                .field(stringify!(#ident), &self.#ident)\n+            }\n+        }\n+    });\n+\n+\n+    quote! {\n+        impl ::core::fmt::Debug for #ident #generics {\n+            #[inline]\n+            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n+                f.debug_struct(stringify!(#ident))\n+                    #(#fields)*\n+                    .finish()\n+            }\n+        }\n+    }\n+\n+}\n"
                },
                {
                    "date": 1720604680853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+use darling::{ast::Data,FromDeriveInput,FromField};\n+use proc_macro2::TokenStream;\n+use quote::quote;\n+use syn::DeriveInput;\n+\n+\n+#[derive(Debug,FromDeriveInput)]\n+\n+struct AutoDebugInfo {\n+    ident: syn::Ident,\n+    generics: syn::Generics,\n+    data:Data<(),AutoDebugFieldsInfo>,\n+}\n+\n+\n+#[derive(Debug,FromField)]\n+#[darling(attributes(debug))]\n+\n+struct AutoDebugFieldsInfo {\n+    ident: Option<syn::Ident>,\n+    #[darling(default)]\n+    skip: bool,\n+}\n+\n+\n+pub (crate) fn process_auto_debug(input: DeriveInput) -> TokenStream{\n+\n+    let AutoDebugInfo {\n+        ident,\n+        generics,\n+        data:Data::Struct(fields),\n+    } = AutoDebugInfo::from_derive_input(&input).unwrap()\n+    else{\n+        panic!(\"AutoDebug only works on structs\");\n+    };\n+\n+\n+    let fields = fields.iter().map(|field: &AutoDebugFieldsInfo|{\n+\n+        let ident: &syn::Ident =  field.ident.as_ref().unwrap();\n+        let skip:bool = field.skip;\n+        \n+        if skip {\n+            quote! {}\n+        } else {\n+            quote! {\n+                .field(stringify!(#ident), &self.#ident)\n+            }\n+        }\n+    });\n+\n+\n+    quote! {\n+        impl ::core::fmt::Debug for #ident #generics {\n+            #[inline]\n+            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n+                f.debug_struct(stringify!(#ident))\n+                    #(#fields)*\n+                    .finish()\n+            }\n+        }\n+    }\n+\n+}\n"
                },
                {
                    "date": 1720604686571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+use darling::{ast::Data,FromDeriveInput,FromField};\n+use proc_macro2::TokenStream;\n+use quote::quote;\n+use syn::DeriveInput;\n+\n+\n+#[derive(Debug,FromDeriveInput)]\n+\n+struct AutoDebugInfo {\n+    ident: syn::Ident,\n+    generics: syn::Generics,\n+    data:Data<(),AutoDebugFieldsInfo>,\n+}\n+\n+\n+#[derive(Debug,FromField)]\n+#[darling(attributes(debug))]\n+\n+struct AutoDebugFieldsInfo {\n+    ident: Option<syn::Ident>,\n+    #[darling(default)]\n+    skip: bool,\n+}\n+\n+\n+pub (crate) fn process_auto_debug(input: DeriveInput) -> TokenStream{\n+\n+    let AutoDebugInfo {\n+        ident,\n+        generics,\n+        data:Data::Struct(fields),\n+    } = AutoDebugInfo::from_derive_input(&input).unwrap()\n+    else{\n+        panic!(\"AutoDebug only works on structs\");\n+    };\n+\n+\n+    let fields = fields.iter().map(|field: &AutoDebugFieldsInfo|{\n+\n+        let ident: &syn::Ident =  field.ident.as_ref().unwrap();\n+        let skip:bool = field.skip;\n+        \n+        if skip {\n+            quote! {};\n+        } else {\n+            quote! {\n+                .field(stringify!(#ident),&self.#ident)\n+            }\n+        }\n+    });\n+\n+\n+    quote! {\n+        impl ::core::fmt::Debug for #ident #generics {\n+            #[inline]\n+            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n+                f.debug_struct(stringify!(#ident))\n+                    #(#fields)*\n+                    .finish()\n+            }\n+        }\n+    }\n+\n+}\n"
                },
                {
                    "date": 1720604709189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n         let ident: &syn::Ident =  field.ident.as_ref().unwrap();\n         let skip:bool = field.skip;\n         \n         if skip {\n-            quote! {};\n+            quote! {}\n         } else {\n             quote! {\n                 .field(stringify!(#ident),&self.#ident)\n             }\n@@ -61,196 +61,4 @@\n         }\n     }\n \n }\n-use darling::{ast::Data,FromDeriveInput,FromField};\n-use proc_macro2::TokenStream;\n-use quote::quote;\n-use syn::DeriveInput;\n-\n-\n-#[derive(Debug,FromDeriveInput)]\n-\n-struct AutoDebugInfo {\n-    ident: syn::Ident,\n-    generics: syn::Generics,\n-    data:Data<(),AutoDebugFieldsInfo>,\n-}\n-\n-\n-#[derive(Debug,FromField)]\n-#[darling(attributes(debug))]\n-\n-struct AutoDebugFieldsInfo {\n-    ident: Option<syn::Ident>,\n-    #[darling(default)]\n-    skip: bool,\n-}\n-\n-\n-pub (crate) fn process_auto_debug(input: DeriveInput) -> TokenStream{\n-\n-    let AutoDebugInfo {\n-        ident,\n-        generics,\n-        data:Data::Struct(fields),\n-    } = AutoDebugInfo::from_derive_input(&input).unwrap()\n-    else{\n-        panic!(\"AutoDebug only works on structs\");\n-    };\n-\n-\n-    let fields = fields.iter().map(|field: &AutoDebugFieldsInfo|{\n-\n-        let ident: &syn::Ident =  field.ident.as_ref().unwrap();\n-        let skip:bool = field.skip;\n-        \n-        if skip {\n-            quote! {}\n-        } else {\n-            quote! {\n-                .field(stringify!(#ident), &self.#ident)\n-            }\n-        }\n-    });\n-\n-\n-    quote! {\n-        impl ::core::fmt::Debug for #ident #generics {\n-            #[inline]\n-            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n-                f.debug_struct(stringify!(#ident))\n-                    #(#fields)*\n-                    .finish()\n-            }\n-        }\n-    }\n-\n-}\n-use darling::{ast::Data,FromDeriveInput,FromField};\n-use proc_macro2::TokenStream;\n-use quote::quote;\n-use syn::DeriveInput;\n-\n-\n-#[derive(Debug,FromDeriveInput)]\n-\n-struct AutoDebugInfo {\n-    ident: syn::Ident,\n-    generics: syn::Generics,\n-    data:Data<(),AutoDebugFieldsInfo>,\n-}\n-\n-\n-#[derive(Debug,FromField)]\n-#[darling(attributes(debug))]\n-\n-struct AutoDebugFieldsInfo {\n-    ident: Option<syn::Ident>,\n-    #[darling(default)]\n-    skip: bool,\n-}\n-\n-\n-pub (crate) fn process_auto_debug(input: DeriveInput) -> TokenStream{\n-\n-    let AutoDebugInfo {\n-        ident,\n-        generics,\n-        data:Data::Struct(fields),\n-    } = AutoDebugInfo::from_derive_input(&input).unwrap()\n-    else{\n-        panic!(\"AutoDebug only works on structs\");\n-    };\n-\n-\n-    let fields = fields.iter().map(|field: &AutoDebugFieldsInfo|{\n-\n-        let ident: &syn::Ident =  field.ident.as_ref().unwrap();\n-        let skip:bool = field.skip;\n-        \n-        if skip {\n-            quote! {};\n-        } else {\n-            quote! {\n-                .field(stringify!(#ident), &self.#ident)\n-            }\n-        }\n-    });\n-\n-\n-    quote! {\n-        impl ::core::fmt::Debug for #ident #generics {\n-            #[inline]\n-            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n-                f.debug_struct(stringify!(#ident))\n-                    #(#fields)*\n-                    .finish()\n-            }\n-        }\n-    }\n-\n-}\n-use darling::{ast::Data,FromDeriveInput,FromField};\n-use proc_macro2::TokenStream;\n-use quote::quote;\n-use syn::DeriveInput;\n-\n-\n-#[derive(Debug,FromDeriveInput)]\n-\n-struct AutoDebugInfo {\n-    ident: syn::Ident,\n-    generics: syn::Generics,\n-    data:Data<(),AutoDebugFieldsInfo>,\n-}\n-\n-\n-#[derive(Debug,FromField)]\n-#[darling(attributes(debug))]\n-\n-struct AutoDebugFieldsInfo {\n-    ident: Option<syn::Ident>,\n-    #[darling(default)]\n-    skip: bool,\n-}\n-\n-\n-pub (crate) fn process_auto_debug(input: DeriveInput) -> TokenStream{\n-\n-    let AutoDebugInfo {\n-        ident,\n-        generics,\n-        data:Data::Struct(fields),\n-    } = AutoDebugInfo::from_derive_input(&input).unwrap()\n-    else{\n-        panic!(\"AutoDebug only works on structs\");\n-    };\n-\n-\n-    let fields = fields.iter().map(|field: &AutoDebugFieldsInfo|{\n-\n-        let ident: &syn::Ident =  field.ident.as_ref().unwrap();\n-        let skip:bool = field.skip;\n-        \n-        if skip {\n-            quote! {};\n-        } else {\n-            quote! {\n-                .field(stringify!(#ident), &self.#ident)\n-            }\n-        }\n-    });\n-\n-\n-    quote! {\n-        impl ::core::fmt::Debug for #ident #generics {\n-            #[inline]\n-            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n-                f.debug_struct(stringify!(#ident))\n-                    #(#fields)*\n-                    .finish()\n-            }\n-        }\n-    }\n-\n-}\n"
                }
            ],
            "date": 1720602591392,
            "name": "Commit-0",
            "content": "use darling::{ast::Data,FromDeriveInput,FromField};\n"
        }
    ]
}