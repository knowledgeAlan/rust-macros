{
    "sourceFile": "macros-test/src/enum_from_darling.rs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 21,
            "patches": [
                {
                    "date": 1720690375135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1720690402854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n use darling::{\n     ast::{Data,Fields,Style},\n     FromDeriveInput,FromField,FromVariant,\n-}\n\\ No newline at end of file\n+};\n+\n+use proc_macro2::TokenStream;\n"
                },
                {
                    "date": 1720693140877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,4 +3,7 @@\n     FromDeriveInput,FromField,FromVariant,\n };\n \n use proc_macro2::TokenStream;\n+use quote::quote;\n+use syn::DeriveInput;\n+\n"
                },
                {
                    "date": 1720768817500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,4 +6,8 @@\n use proc_macro2::TokenStream;\n use quote::quote;\n use syn::DeriveInput;\n \n+#[derive(Debug,FromDeriveInput)]\n+struct EnumFromDarling {\n+    \n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720768850000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,6 +8,9 @@\n use syn::DeriveInput;\n \n #[derive(Debug,FromDeriveInput)]\n struct EnumFromDarling {\n-    \n+\n+    ident: syn::Ident,\n+    generics: syn::Generics,\n+    data: Data<EnumVariants,()>,\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720768908262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,5 +12,11 @@\n \n     ident: syn::Ident,\n     generics: syn::Generics,\n     data: Data<EnumVariants,()>,\n+}\n+\n+#[derive(Debug,FromVariant)]\n+struct  EnumVariants {\n+    ident :syn::Ident,\n+    fields: Fields<EnumVariantFeilds>,\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720768945714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,5 +18,11 @@\n #[derive(Debug,FromVariant)]\n struct  EnumVariants {\n     ident :syn::Ident,\n     fields: Fields<EnumVariantFeilds>,\n+}\n+\n+\n+#[derive(Debug,FromField)]\n+struct  EnumVariantFeilds {\n+    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720768955745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,6 +23,6 @@\n \n \n #[derive(Debug,FromField)]\n struct  EnumVariantFeilds {\n-    \n+    ty: syn::Type,\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720768999464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,5 +24,9 @@\n \n #[derive(Debug,FromField)]\n struct  EnumVariantFeilds {\n     ty: syn::Type,\n+}\n+\n+pub(crate) fn process_enum_from_darling(input :DeriveInput)->TokenStream {\n+    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720769124586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,6 +27,15 @@\n     ty: syn::Type,\n }\n \n pub(crate) fn process_enum_from_darling(input :DeriveInput)->TokenStream {\n-    \n+\n+    let EnumFromDarling {\n+\n+        ident,\n+        generics,\n+        data: Data::Enum(data),\n+    } = EnumFromDarling::from_derive_input(&input).expect(\"can not parse input\")\n+    else{\n+        panic!(\"EnumFromDarling only works on enums\");\n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720769174923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,6 +36,11 @@\n         data: Data::Enum(data),\n     } = EnumFromDarling::from_derive_input(&input).expect(\"can not parse input\")\n     else{\n         panic!(\"EnumFromDarling only works on enums\");\n-    }\n+    };\n+\n+\n+    let from_impls = data.iter().map(|variant|{\n+\n+    });\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720769202373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,48 @@\n+use darling::{\n+    ast::{Data,Fields,Style},\n+    FromDeriveInput,FromField,FromVariant,\n+};\n+\n+use proc_macro2::TokenStream;\n+use quote::quote;\n+use syn::DeriveInput;\n+\n+#[derive(Debug,FromDeriveInput)]\n+struct EnumFromDarling {\n+\n+    ident: syn::Ident,\n+    generics: syn::Generics,\n+    data: Data<EnumVariants,()>,\n+}\n+\n+#[derive(Debug,FromVariant)]\n+struct  EnumVariants {\n+    ident :syn::Ident,\n+    fields: Fields<EnumVariantFeilds>,\n+}\n+\n+\n+#[derive(Debug,FromField)]\n+struct  EnumVariantFeilds {\n+    ty: syn::Type,\n+}\n+\n+pub(crate) fn process_enum_from_darling(input :DeriveInput)->TokenStream {\n+\n+    let EnumFromDarling {\n+\n+        ident,\n+        generics,\n+        data: Data::Enum(data),\n+    } = EnumFromDarling::from_derive_input(&input).expect(\"can not parse input\")\n+    else{\n+        panic!(\"EnumFromDarling only works on enums\");\n+    };\n+\n+\n+    let from_impls = data.iter().map(|variant|{\n+\n+        let var &syn::Ident = &variant.ident;\n+        \n+    });\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720769210669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,48 @@\n+use darling::{\n+    ast::{Data,Fields,Style},\n+    FromDeriveInput,FromField,FromVariant,\n+};\n+\n+use proc_macro2::TokenStream;\n+use quote::quote;\n+use syn::DeriveInput;\n+\n+#[derive(Debug,FromDeriveInput)]\n+struct EnumFromDarling {\n+\n+    ident: syn::Ident,\n+    generics: syn::Generics,\n+    data: Data<EnumVariants,()>,\n+}\n+\n+#[derive(Debug,FromVariant)]\n+struct  EnumVariants {\n+    ident :syn::Ident,\n+    fields: Fields<EnumVariantFeilds>,\n+}\n+\n+\n+#[derive(Debug,FromField)]\n+struct  EnumVariantFeilds {\n+    ty: syn::Type,\n+}\n+\n+pub(crate) fn process_enum_from_darling(input :DeriveInput)->TokenStream {\n+\n+    let EnumFromDarling {\n+\n+        ident,\n+        generics,\n+        data: Data::Enum(data),\n+    } = EnumFromDarling::from_derive_input(&input).expect(\"can not parse input\")\n+    else{\n+        panic!(\"EnumFromDarling only works on enums\");\n+    };\n+\n+\n+    let from_impls = data.iter().map(|variant|{\n+\n+        let var: &syn::Ident = &variant.ident;\n+\n+    });\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720769236642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,101 +42,8 @@\n \n     let from_impls = data.iter().map(|variant|{\n \n         let var: &syn::Ident = &variant.ident;\n-\n-    });\n-}\n-use darling::{\n-    ast::{Data,Fields,Style},\n-    FromDeriveInput,FromField,FromVariant,\n-};\n-\n-use proc_macro2::TokenStream;\n-use quote::quote;\n-use syn::DeriveInput;\n-\n-#[derive(Debug,FromDeriveInput)]\n-struct EnumFromDarling {\n-\n-    ident: syn::Ident,\n-    generics: syn::Generics,\n-    data: Data<EnumVariants,()>,\n-}\n-\n-#[derive(Debug,FromVariant)]\n-struct  EnumVariants {\n-    ident :syn::Ident,\n-    fields: Fields<EnumVariantFeilds>,\n-}\n-\n-\n-#[derive(Debug,FromField)]\n-struct  EnumVariantFeilds {\n-    ty: syn::Type,\n-}\n-\n-pub(crate) fn process_enum_from_darling(input :DeriveInput)->TokenStream {\n-\n-    let EnumFromDarling {\n-\n-        ident,\n-        generics,\n-        data: Data::Enum(data),\n-    } = EnumFromDarling::from_derive_input(&input).expect(\"can not parse input\")\n-    else{\n-        panic!(\"EnumFromDarling only works on enums\");\n-    };\n-\n-\n-    let from_impls = data.iter().map(|variant|{\n-\n-        let var &syn::Ident = &variant.ident;\n+        let style: &Style = &variant.fields.style;\n         \n     });\n-}\n-use darling::{\n-    ast::{Data,Fields,Style},\n-    FromDeriveInput,FromField,FromVariant,\n-};\n-\n-use proc_macro2::TokenStream;\n-use quote::quote;\n-use syn::DeriveInput;\n-\n-#[derive(Debug,FromDeriveInput)]\n-struct EnumFromDarling {\n-\n-    ident: syn::Ident,\n-    generics: syn::Generics,\n-    data: Data<EnumVariants,()>,\n-}\n-\n-#[derive(Debug,FromVariant)]\n-struct  EnumVariants {\n-    ident :syn::Ident,\n-    fields: Fields<EnumVariantFeilds>,\n-}\n-\n-\n-#[derive(Debug,FromField)]\n-struct  EnumVariantFeilds {\n-    ty: syn::Type,\n-}\n-\n-pub(crate) fn process_enum_from_darling(input :DeriveInput)->TokenStream {\n-\n-    let EnumFromDarling {\n-\n-        ident,\n-        generics,\n-        data: Data::Enum(data),\n-    } = EnumFromDarling::from_derive_input(&input).expect(\"can not parse input\")\n-    else{\n-        panic!(\"EnumFromDarling only works on enums\");\n-    };\n-\n-\n-    let from_impls = data.iter().map(|variant|{\n-\n-    });\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720769263609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,54 @@\n+use darling::{\n+    ast::{Data,Fields,Style},\n+    FromDeriveInput,FromField,FromVariant,\n+};\n+\n+use proc_macro2::TokenStream;\n+use quote::quote;\n+use syn::DeriveInput;\n+\n+#[derive(Debug,FromDeriveInput)]\n+struct EnumFromDarling {\n+\n+    ident: syn::Ident,\n+    generics: syn::Generics,\n+    data: Data<EnumVariants,()>,\n+}\n+\n+#[derive(Debug,FromVariant)]\n+struct  EnumVariants {\n+    ident :syn::Ident,\n+    fields: Fields<EnumVariantFeilds>,\n+}\n+\n+\n+#[derive(Debug,FromField)]\n+struct  EnumVariantFeilds {\n+    ty: syn::Type,\n+}\n+\n+pub(crate) fn process_enum_from_darling(input :DeriveInput)->TokenStream {\n+\n+    let EnumFromDarling {\n+\n+        ident,\n+        generics,\n+        data: Data::Enum(data),\n+    } = EnumFromDarling::from_derive_input(&input).expect(\"can not parse input\")\n+    else{\n+        panic!(\"EnumFromDarling only works on enums\");\n+    };\n+\n+\n+    let from_impls = data.iter().map(|variant|{\n+\n+        let var: &syn::Ident = &variant.ident;\n+        let style: &Style = &variant.fields.style;\n+\n+        match style {\n+            Style::Tuple if variant.fields.len() == 1 =>{\n+                \n+            }\n+        }\n+    });\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720769327938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,58 +46,9 @@\n         let style: &Style = &variant.fields.style;\n \n         match style {\n             Style::Tuple if variant.fields.len() == 1 =>{\n-                \n+                let field: &EnumVariantFeilds = variant.fields.iter().next().expect(\"should have 1 field\");\n             }\n         }\n     });\n-}\n-use darling::{\n-    ast::{Data,Fields,Style},\n-    FromDeriveInput,FromField,FromVariant,\n-};\n-\n-use proc_macro2::TokenStream;\n-use quote::quote;\n-use syn::DeriveInput;\n-\n-#[derive(Debug,FromDeriveInput)]\n-struct EnumFromDarling {\n-\n-    ident: syn::Ident,\n-    generics: syn::Generics,\n-    data: Data<EnumVariants,()>,\n-}\n-\n-#[derive(Debug,FromVariant)]\n-struct  EnumVariants {\n-    ident :syn::Ident,\n-    fields: Fields<EnumVariantFeilds>,\n-}\n-\n-\n-#[derive(Debug,FromField)]\n-struct  EnumVariantFeilds {\n-    ty: syn::Type,\n-}\n-\n-pub(crate) fn process_enum_from_darling(input :DeriveInput)->TokenStream {\n-\n-    let EnumFromDarling {\n-\n-        ident,\n-        generics,\n-        data: Data::Enum(data),\n-    } = EnumFromDarling::from_derive_input(&input).expect(\"can not parse input\")\n-    else{\n-        panic!(\"EnumFromDarling only works on enums\");\n-    };\n-\n-\n-    let from_impls = data.iter().map(|variant|{\n-\n-        let var: &syn::Ident = &variant.ident;\n-        let style: &Style = &variant.fields.style;\n-        \n-    });\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720769361104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,60 @@\n+use darling::{\n+    ast::{Data,Fields,Style},\n+    FromDeriveInput,FromField,FromVariant,\n+};\n+\n+use proc_macro2::TokenStream;\n+use quote::quote;\n+use syn::DeriveInput;\n+\n+#[derive(Debug,FromDeriveInput)]\n+struct EnumFromDarling {\n+\n+    ident: syn::Ident,\n+    generics: syn::Generics,\n+    data: Data<EnumVariants,()>,\n+}\n+\n+#[derive(Debug,FromVariant)]\n+struct  EnumVariants {\n+    ident :syn::Ident,\n+    fields: Fields<EnumVariantFeilds>,\n+}\n+\n+\n+#[derive(Debug,FromField)]\n+struct  EnumVariantFeilds {\n+    ty: syn::Type,\n+}\n+\n+pub(crate) fn process_enum_from_darling(input :DeriveInput)->TokenStream {\n+\n+    let EnumFromDarling {\n+\n+        ident,\n+        generics,\n+        data: Data::Enum(data),\n+    } = EnumFromDarling::from_derive_input(&input).expect(\"can not parse input\")\n+    else{\n+        panic!(\"EnumFromDarling only works on enums\");\n+    };\n+\n+\n+    let from_impls = data.iter().map(|variant|{\n+\n+        let var: &syn::Ident = &variant.ident;\n+        let style: &Style = &variant.fields.style;\n+\n+        match style {\n+            Style::Tuple if variant.fields.len() == 1 =>{\n+                let field: &EnumVariantFeilds = variant.fields.iter().next().expect(\"should have 1 field\");\n+            \n+                 let ty: &syn::Type = &field.ty;\n+                 \n+            }\n+\n+\n+\n+        }\n+    });\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720769397463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,66 +49,18 @@\n             Style::Tuple if variant.fields.len() == 1 =>{\n                 let field: &EnumVariantFeilds = variant.fields.iter().next().expect(\"should have 1 field\");\n             \n                  let ty: &syn::Type = &field.ty;\n-                 \n-            }\n \n+                 quote! {\n \n+                    impl #generics From<#ty> for #ident #generics {\n+                        \n+                    }\n+                 }\n+            }\n \n-        }\n-    });\n-}\n-use darling::{\n-    ast::{Data,Fields,Style},\n-    FromDeriveInput,FromField,FromVariant,\n-};\n \n-use proc_macro2::TokenStream;\n-use quote::quote;\n-use syn::DeriveInput;\n \n-#[derive(Debug,FromDeriveInput)]\n-struct EnumFromDarling {\n-\n-    ident: syn::Ident,\n-    generics: syn::Generics,\n-    data: Data<EnumVariants,()>,\n-}\n-\n-#[derive(Debug,FromVariant)]\n-struct  EnumVariants {\n-    ident :syn::Ident,\n-    fields: Fields<EnumVariantFeilds>,\n-}\n-\n-\n-#[derive(Debug,FromField)]\n-struct  EnumVariantFeilds {\n-    ty: syn::Type,\n-}\n-\n-pub(crate) fn process_enum_from_darling(input :DeriveInput)->TokenStream {\n-\n-    let EnumFromDarling {\n-\n-        ident,\n-        generics,\n-        data: Data::Enum(data),\n-    } = EnumFromDarling::from_derive_input(&input).expect(\"can not parse input\")\n-    else{\n-        panic!(\"EnumFromDarling only works on enums\");\n-    };\n-\n-\n-    let from_impls = data.iter().map(|variant|{\n-\n-        let var: &syn::Ident = &variant.ident;\n-        let style: &Style = &variant.fields.style;\n-\n-        match style {\n-            Style::Tuple if variant.fields.len() == 1 =>{\n-                let field: &EnumVariantFeilds = variant.fields.iter().next().expect(\"should have 1 field\");\n-            }\n         }\n     });\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720769423006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,69 @@\n+use darling::{\n+    ast::{Data,Fields,Style},\n+    FromDeriveInput,FromField,FromVariant,\n+};\n+\n+use proc_macro2::TokenStream;\n+use quote::quote;\n+use syn::DeriveInput;\n+\n+#[derive(Debug,FromDeriveInput)]\n+struct EnumFromDarling {\n+\n+    ident: syn::Ident,\n+    generics: syn::Generics,\n+    data: Data<EnumVariants,()>,\n+}\n+\n+#[derive(Debug,FromVariant)]\n+struct  EnumVariants {\n+    ident :syn::Ident,\n+    fields: Fields<EnumVariantFeilds>,\n+}\n+\n+\n+#[derive(Debug,FromField)]\n+struct  EnumVariantFeilds {\n+    ty: syn::Type,\n+}\n+\n+pub(crate) fn process_enum_from_darling(input :DeriveInput)->TokenStream {\n+\n+    let EnumFromDarling {\n+\n+        ident,\n+        generics,\n+        data: Data::Enum(data),\n+    } = EnumFromDarling::from_derive_input(&input).expect(\"can not parse input\")\n+    else{\n+        panic!(\"EnumFromDarling only works on enums\");\n+    };\n+\n+\n+    let from_impls = data.iter().map(|variant|{\n+\n+        let var: &syn::Ident = &variant.ident;\n+        let style: &Style = &variant.fields.style;\n+\n+        match style {\n+            Style::Tuple if variant.fields.len() == 1 =>{\n+                let field: &EnumVariantFeilds = variant.fields.iter().next().expect(\"should have 1 field\");\n+            \n+                 let ty: &syn::Type = &field.ty;\n+\n+                 quote! {\n+\n+                    impl #generics From<#ty> for #ident #generics {\n+\n+                        fn from(v:#ty) -> Self {\n+                            \n+                        }\n+                    }\n+                 }\n+            }\n+\n+\n+\n+        }\n+    });\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720769437416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n \n                     impl #generics From<#ty> for #ident #generics {\n \n                         fn from(v:#ty) -> Self {\n-                            \n+                            #ident::#var(v)\n                         }\n                     }\n                  }\n             }\n@@ -65,71 +65,5 @@\n \n \n         }\n     });\n-}\n-use darling::{\n-    ast::{Data,Fields,Style},\n-    FromDeriveInput,FromField,FromVariant,\n-};\n-\n-use proc_macro2::TokenStream;\n-use quote::quote;\n-use syn::DeriveInput;\n-\n-#[derive(Debug,FromDeriveInput)]\n-struct EnumFromDarling {\n-\n-    ident: syn::Ident,\n-    generics: syn::Generics,\n-    data: Data<EnumVariants,()>,\n-}\n-\n-#[derive(Debug,FromVariant)]\n-struct  EnumVariants {\n-    ident :syn::Ident,\n-    fields: Fields<EnumVariantFeilds>,\n-}\n-\n-\n-#[derive(Debug,FromField)]\n-struct  EnumVariantFeilds {\n-    ty: syn::Type,\n-}\n-\n-pub(crate) fn process_enum_from_darling(input :DeriveInput)->TokenStream {\n-\n-    let EnumFromDarling {\n-\n-        ident,\n-        generics,\n-        data: Data::Enum(data),\n-    } = EnumFromDarling::from_derive_input(&input).expect(\"can not parse input\")\n-    else{\n-        panic!(\"EnumFromDarling only works on enums\");\n-    };\n-\n-\n-    let from_impls = data.iter().map(|variant|{\n-\n-        let var: &syn::Ident = &variant.ident;\n-        let style: &Style = &variant.fields.style;\n-\n-        match style {\n-            Style::Tuple if variant.fields.len() == 1 =>{\n-                let field: &EnumVariantFeilds = variant.fields.iter().next().expect(\"should have 1 field\");\n-            \n-                 let ty: &syn::Type = &field.ty;\n-\n-                 quote! {\n-\n-                    impl #generics From<#ty> for #ident #generics {\n-                        \n-                    }\n-                 }\n-            }\n-\n-\n-\n-        }\n-    });\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720769452911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,71 @@\n+use darling::{\n+    ast::{Data,Fields,Style},\n+    FromDeriveInput,FromField,FromVariant,\n+};\n+\n+use proc_macro2::TokenStream;\n+use quote::quote;\n+use syn::DeriveInput;\n+\n+#[derive(Debug,FromDeriveInput)]\n+struct EnumFromDarling {\n+\n+    ident: syn::Ident,\n+    generics: syn::Generics,\n+    data: Data<EnumVariants,()>,\n+}\n+\n+#[derive(Debug,FromVariant)]\n+struct  EnumVariants {\n+    ident :syn::Ident,\n+    fields: Fields<EnumVariantFeilds>,\n+}\n+\n+\n+#[derive(Debug,FromField)]\n+struct  EnumVariantFeilds {\n+    ty: syn::Type,\n+}\n+\n+pub(crate) fn process_enum_from_darling(input :DeriveInput)->TokenStream {\n+\n+    let EnumFromDarling {\n+\n+        ident,\n+        generics,\n+        data: Data::Enum(data),\n+    } = EnumFromDarling::from_derive_input(&input).expect(\"can not parse input\")\n+    else{\n+        panic!(\"EnumFromDarling only works on enums\");\n+    };\n+\n+\n+    let from_impls = data.iter().map(|variant|{\n+\n+        let var: &syn::Ident = &variant.ident;\n+        let style: &Style = &variant.fields.style;\n+\n+        match style {\n+            Style::Tuple if variant.fields.len() == 1 =>{\n+                let field: &EnumVariantFeilds = variant.fields.iter().next().expect(\"should have 1 field\");\n+            \n+                 let ty: &syn::Type = &field.ty;\n+\n+                 quote! {\n+\n+                    impl #generics From<#ty> for #ident #generics {\n+\n+                        fn from(v:#ty) -> Self {\n+                            #ident::#var(v)\n+                        }\n+                    }\n+                 }\n+            }\n+\n+            _=> quote! {}\n+\n+\n+\n+        }\n+    });\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720769477686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,76 @@\n+use darling::{\n+    ast::{Data,Fields,Style},\n+    FromDeriveInput,FromField,FromVariant,\n+};\n+\n+use proc_macro2::TokenStream;\n+use quote::quote;\n+use syn::DeriveInput;\n+\n+#[derive(Debug,FromDeriveInput)]\n+struct EnumFromDarling {\n+\n+    ident: syn::Ident,\n+    generics: syn::Generics,\n+    data: Data<EnumVariants,()>,\n+}\n+\n+#[derive(Debug,FromVariant)]\n+struct  EnumVariants {\n+    ident :syn::Ident,\n+    fields: Fields<EnumVariantFeilds>,\n+}\n+\n+\n+#[derive(Debug,FromField)]\n+struct  EnumVariantFeilds {\n+    ty: syn::Type,\n+}\n+\n+pub(crate) fn process_enum_from_darling(input :DeriveInput)->TokenStream {\n+\n+    let EnumFromDarling {\n+\n+        ident,\n+        generics,\n+        data: Data::Enum(data),\n+    } = EnumFromDarling::from_derive_input(&input).expect(\"can not parse input\")\n+    else{\n+        panic!(\"EnumFromDarling only works on enums\");\n+    };\n+\n+\n+    let from_impls = data.iter().map(|variant|{\n+\n+        let var: &syn::Ident = &variant.ident;\n+        let style: &Style = &variant.fields.style;\n+\n+        match style {\n+            Style::Tuple if variant.fields.len() == 1 =>{\n+                let field: &EnumVariantFeilds = variant.fields.iter().next().expect(\"should have 1 field\");\n+            \n+                 let ty: &syn::Type = &field.ty;\n+\n+                 quote! {\n+\n+                    impl #generics From<#ty> for #ident #generics {\n+\n+                        fn from(v:#ty) -> Self {\n+                            #ident::#var(v)\n+                        }\n+                    }\n+                 }\n+            }\n+\n+            _=> quote! {},\n+\n+\n+\n+        }\n+    });\n+\n+\n+    quote! {\n+        #(#from_impls)*\n+    }\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1720690375135,
            "name": "Commit-0",
            "content": "use darling::{\n    ast::{Data,Fields,Style},\n    FromDeriveInput,FromField,FromVariant,\n}"
        }
    ]
}